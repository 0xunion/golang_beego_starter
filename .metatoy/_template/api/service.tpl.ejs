/* @MT-TPL-FILE
 * @Desc: CURD SERVICE 接口模板
 * @To: src/service/curd/<%=OPT.the_name%>.go
 * @Replace: -
 */
package curd

/* @MT-TPL-IMPORT-START */
import (
    model "github.com/0xunion/exercise_back/src/model"
    master_types "github.com/0xunion/exercise_back/src/types"
    <%_ if (H.count_generate_type(DATA, OPT.the_name, 'create', 'timestamp') + 
        H.count_generate_type(DATA, OPT.the_name, 'delete', 'timestamp') + 
        H.count_generate_type(DATA, OPT.the_name, 'update', 'timestamp') +
        H.count_generate_type(DATA, OPT.the_name, 'get', 'timestamp') +
        H.count_generate_type(DATA, OPT.the_name, 'list', 'timestamp') +
        H.count_generate_type(DATA, OPT.the_name, 'search', 'timestamp')
         > 0) _%>
    <%_  { _%>
    "time"
    <%_ } _%>
)
/* @MT-TPL-IMPORT-END */

/* @MT-TPL-CREATE-START */
func Create<%= OPT.TheName %>Service(
    user *master_types.User,
    <%_ for( const field of H.fields(DATA, OPT.the_name, 'create')??[] ){_%>
    <%_ if( H.field_generate_type(DATA, OPT.the_name, field.name, 'create') == 'form' ){_%>
    <%= H.ul(field.name) %> <%= field.value.type %>,
    <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'create') == 'id'){_%>
    <%= H.ul(field.name) %> master_types.PrimaryId,
    <%_ } _%>
    <%_ } _%>
) (*master_types.MasterResponse) {
    // check if the user has permission of creating
    access_controll := false
    <%_ for( const permission of H.table_permissions(DATA, OPT.the_name, 'create')??[] ){_%>
    if !access_controll {
    <%_ if (permission.role == 'all') { _%>
        access_controll = true
    <%_ } else if (permission.role == 'admin') { _%>
        if user.IsAdmin() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'model') { _%>
        if user.AllowManage<%= OPT.TheName %>() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'belong') { _%>
        <% //nothing here, object has not been created yet %> 
    <%_ } else if (permission.role == 'extend') { _%>
        <% //nothing here, object has not been created yet %> 
    <%_ } _%>
    } 
    <%_ } _%>

    if !access_controll {
        return master_types.ErrorResponse(-403, "Access Denied")
    }

    <% // count if there is more than 0 fields need timestamp %>
    <%_ if(H.count_generate_type(DATA, OPT.the_name, 'create', 'timestamp') > 0) { _%>
    now := time.Now()
    <%_ } _%>

    // create model
    <%= OPT.the_name %> := &master_types.<%= H.table(DATA, OPT.the_name).type_name %> {
        <%_ for( const field of H.fields(DATA, OPT.the_name)??[] ){_%>
        <%_ if( H.field_generate_type(DATA, OPT.the_name, field.name, 'create') == 'form' ){_%>
        <%= H.bc(field.name) %>: <%= H.ul(field.name) %>,
        <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'create') == 'id'){_%>
        <%= H.bc(field.name) %>: <%= H.ul(field.name) %>,
        <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'create') == 'timestamp'){_%>
        <%= H.bc(field.name) %>: now.Unix(),
        <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'create') == 'uid'){_%>
        <%= H.bc(field.name) %>: user.Id,
        <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'create') == 'default'){_%>
        <%= H.bc(field.name) %>: <%= field.value.default %>,
        <%_ } _%>
        <%_ } _%>
    }

    // save model
    err := model.ModelInsert(<%= OPT.the_name %>, nil)
    if err != nil {
        return master_types.ErrorResponse(-500, err.Error())
    }

    // return response
    return master_types.SuccessResponse(<%= OPT.the_name %>)
}
/* @MT-TPL-CREATE-END */

/* @MT-TPL-UPDATE-START */
func Update<%= OPT.TheName %>Service(
    user *master_types.User,
    <%_ for( const field of H.fields(DATA, OPT.the_name, 'update')??[] ){_%>
    <%_ if( H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'form' ){_%>
    <%= H.ul(field.name) %> <%= field.value.type %>,
    <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'id'){_%>
    <%= H.ul(field.name) %> master_types.PrimaryId,
    <%_ } _%>
    <%_ } _%>
) (*master_types.MasterResponse) {
    // check if the user has permission of updating
    var object *master_types.<%= H.table(DATA, OPT.the_name).type_name %>
    get_object := func() (*master_types.<%= H.table(DATA, OPT.the_name).type_name %>, error) {
        if object != nil {
            return object, nil
        }
        var err error
        object, err = model.ModelGet[master_types.<%= H.table(DATA, OPT.the_name).type_name %>](
            model.NewMongoFilter(
            <%_ for( const field of H.fields(DATA, OPT.the_name, 'update')??[] ){_%>
                <%_ if (H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'id'){_%>
                model.IdFilter(
                    <%= H.ul(field.name) %>,
                ),
                <%_ } _%>
            <%_ } _%>
                model.MongoNoFlagFilter(master_types.BASIC_TYPE_FLAG_DELETED),
            ),
        )
        if err != nil {
            return nil, err
        }
        return object, nil
    }

    access_controll := false
    <%_ for( const permission of H.table_permissions(DATA, OPT.the_name, 'update')??[] ){_%>
    if !access_controll {
    <%_ if (permission.role == 'all') { _%>
        access_controll = true
        <%_ break _%>
    <%_ } else if (permission.role == 'admin') { _%>
        if user.IsAdmin() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'model') { _%>
        if user.AllowManage<%= OPT.TheName %>() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'belong') { _%>
        // get object
        object, err := get_object()
        if err == nil {
            if <%= H.bool_expression('PrimaryId', 'eq', 'object.' + H.bc(H.permission_field(DATA, OPT.the_name).field), 'user.Id') %> {
                access_controll = true
            }
        }
    <%_ } _%>
    }
    <%_ } _%>

    if !access_controll {
        return master_types.ErrorResponse(-403, "Access Denied")
    }

    <% // count if there is more than 0 fields need timestamp %>
    <%_ if(H.count_generate_type(DATA, OPT.the_name, 'update', 'timestamp') > 0) { _%>
    now := time.Now()
    <%_ } _%>

    // get object and update
    object, err := get_object()
    if err != nil {
        return master_types.ErrorResponse(-500, err.Error())
    }

    <%_ for( const field of H.fields(DATA, OPT.the_name, 'update')??[] ){_%>
    <%_ if( H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'form' ){_%>
    object.<%= H.bc(field.name) %> = <%= H.ul(field.name) %>
    <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'timestamp'){_%>
    object.<%= H.bc(field.name) %> = now.Unix()
    <%_ } _%>
    <%_ } _%>

    // save model
    err = model.ModelUpdate(
        model.NewMongoFilter(
        <%_ for( const field of H.fields(DATA, OPT.the_name, 'update')??[] ){_%>
            <%_ if (H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'id'){_%>
            model.IdFilter(
                <%= H.ul(field.name) %>,
            ),
            <%_ } _%>
        <%_ } _%>
            model.MongoNoFlagFilter(master_types.BASIC_TYPE_FLAG_DELETED),
        ),
        object,
    )

    if err != nil {
        return master_types.ErrorResponse(-500, err.Error())
    }

    // return response
    return master_types.SuccessResponse(object)
}
/* @MT-TPL-UPDATE-END */

/* @MT-TPL-DELETE-START */
func Delete<%= OPT.TheName %>Service(
    user *master_types.User,
    <%_ for( const field of H.fields(DATA, OPT.the_name, 'delete')??[] ){_%>
    <%_ if( H.field_generate_type(DATA, OPT.the_name, field.name, 'delete') == 'form' ){_%>
    <%= H.ul(field.name) %> <%= field.value.type %>,
    <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'delete') == 'id'){_%>
    <%= H.ul(field.name) %> master_types.PrimaryId,
    <%_ } _%>
    <%_ } _%>
) (*master_types.MasterResponse) {
    // check if the user has permission of deleting
    var object *master_types.<%= H.table(DATA, OPT.the_name).type_name %>
    get_object := func() (*master_types.<%= H.table(DATA, OPT.the_name).type_name %>, error) {
        if object != nil {
            return object, nil
        }
        var err error
        object, err = model.ModelGet[master_types.<%= H.table(DATA, OPT.the_name).type_name %>](
            model.NewMongoFilter(
            <%_ for( const field of H.fields(DATA, OPT.the_name, 'delete')??[] ){_%>
                <%_ if (H.field_generate_type(DATA, OPT.the_name, field.name, 'delete') == 'id'){_%>
                model.IdFilter(
                    <%= H.ul(field.name) %>,
                ),
                <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'form'){_%>
                    model.MongoKeyFilter(
                        "<%= H.ul(field.name) %>",
                        <%= H.ul(field.name) %>,
                    ),
                <%_ } _%>
            <%_ } _%>
            ),
        )
        if err != nil {
            return nil, err
        }
        return object, nil
    }

    access_controll := false
    <%_ for( const permission of H.table_permissions(DATA, OPT.the_name, 'delete')??[] ){_%>
    if !access_controll {
    <%_ if (permission.role == 'all') { _%>
        access_controll = true
        <%_ break _%>
    <%_ } else if (permission.role == 'admin') { _%>
        if user.IsAdmin() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'model') { _%>
        if user.AllowManage<%= OPT.TheName %>() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'belong') { _%>
        // get object
        object, err := get_object()
        if err == nil {
            if <%= H.bool_expression('PrimaryId', 'eq', 'object.' + H.bc(H.permission_field(DATA, OPT.the_name).field), 'user.Id') %> {
                access_controll = true
            }
        }
    <%_ } _%>
    }
    <%_ } _%>

    if !access_controll {
        return master_types.ErrorResponse(-403, "Access Denied")
    }

    // get object and delete
    object, err := get_object()
    if err != nil {
        return master_types.ErrorResponse(-500, err.Error())
    }

    // delete model
    object.Delete()
    // save model
    err = model.ModelUpdate(
        model.NewMongoFilter(
        <%_ for( const field of H.fields(DATA, OPT.the_name, 'delete')??[] ){_%>
            <%_ if (H.field_generate_type(DATA, OPT.the_name, field.name, 'delete') == 'id'){_%>
            model.IdFilter(
                <%= H.ul(field.name) %>,
            ),
            <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'form'){_%>
                model.MongoKeyFilter(
                    "<%= H.ul(field.name) %>",
                    <%= H.ul(field.name) %>,
                ),
            <%_ } _%>
        <%_ } _%>
            model.MongoNoFlagFilter(master_types.BASIC_TYPE_FLAG_DELETED),
        ),
        object,
    )

    if err != nil {
        return master_types.ErrorResponse(-500, err.Error())
    }

    // return response
    return master_types.SuccessResponse(nil)
}

/* @MT-TPL-DELETE-END */

/* @MT-TPL-GET-START */
func Get<%= OPT.TheName %>Service(
    user *master_types.User,
    <%_ for( const field of H.fields(DATA, OPT.the_name, 'get')??[] ){_%>
    <%_ if( H.field_generate_type(DATA, OPT.the_name, field.name, 'get') == 'form' ){_%>
    <%= H.ul(field.name) %> <%= field.value.type %>,
    <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'get') == 'id'){_%>
    <%= H.ul(field.name) %> master_types.PrimaryId,
    <%_ } _%>
    <%_ } _%>
) (*master_types.MasterResponse) {
    // check if the user has permission of getting
    var object *master_types.<%= H.table(DATA, OPT.the_name).type_name %>
    get_object := func() (*master_types.<%= H.table(DATA, OPT.the_name).type_name %>, error) {
        if object != nil {
            return object, nil
        }
        var err error
        object, err = model.ModelGet[master_types.<%= H.table(DATA, OPT.the_name).type_name %>](
            model.NewMongoFilter(
            <%_ for( const field of H.fields(DATA, OPT.the_name, 'get')??[] ){_%>
                <%_ if (H.field_generate_type(DATA, OPT.the_name, field.name, 'get') == 'id'){_%>
                    model.IdFilter(
                <%= H.ul(field.name) %>,
                ),
                <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'form'){_%>
                    model.MongoKeyFilter(
                        "<%= H.ul(field.name) %>",
                        <%= H.ul(field.name) %>,
                    ),
                <%_ } _%>
            <%_ } _%>
                model.MongoNoFlagFilter(master_types.BASIC_TYPE_FLAG_DELETED),
            ),
        )
        if err != nil {
            return nil, err
        }
        return object, nil
    }

    access_controll := false
    <%_ for( const permission of H.table_permissions(DATA, OPT.the_name, 'get')??[] ){_%>
    if !access_controll {
    <%_ if (permission.role == 'all') { _%>
        access_controll = true
    }
        <%_ break _%>
    <%_ } else if (permission.role == 'admin') { _%>
        if user.IsAdmin() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'model') { _%>
        if user.AllowManage<%= OPT.TheName %>() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'belong') { _%>
        // get object
        object, err := get_object()
        if err == nil {
            if <%= H.bool_expression('PrimaryId', 'eq', 'object.' + H.bc(H.permission_field(DATA, OPT.the_name).field), 'user.Id') %> {
                access_controll = true
            }
        }
    <%_ } _%>
    }
    <%_ } _%>

    if !access_controll {
        return master_types.ErrorResponse(-403, "Access Denied")
    }

    // get object
    object, err := get_object()
    if err != nil {
        return master_types.ErrorResponse(-500, err.Error())
    }

    // return response
    return master_types.SuccessResponse(object)
}
/* @MT-TPL-GET-END */

/* @MT-TPL-LIST-START */
func List<%= OPT.TheName %>Service(
    user *master_types.User,
    <%_ for( const field of H.fields(DATA, OPT.the_name, 'list')??[] ){_%>
    <%_ if( H.field_generate_type(DATA, OPT.the_name, field.name, 'list') == 'form' ){_%>
    <%= H.ul(field.name) %> <%= field.value.type %>,
    <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'list') == 'id'){_%>
    <%= H.ul(field.name) %> master_types.PrimaryId,
    <%_ } _%>
    <%_ } _%>
    index, limit int64,
) (*master_types.MasterResponse) {
    // check if the user has permission of listing
    access_controll := false
    <%_ for( const permission of H.table_permissions(DATA, OPT.the_name, 'list')??[] ){_%>
    if !access_controll {
    <%_ if (permission.role == 'all') { _%>
        access_controll = true
    }
        <%_ break _%>
    <%_ } else if (permission.role == 'admin') { _%>
        if user.IsAdmin() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'model') { _%>
        if user.AllowManage<%= OPT.TheName %>() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'belong') { _%>
        // get object
        object, err := get_object()
        if err == nil {
            if <%= H.bool_expression('PrimaryId', 'eq', 'object.' + H.bc(H.permission_field(DATA, OPT.the_name).field), 'user.Id') %> {
                access_controll = true
            }
        }
    <%_ } _%>
    }
    <%_ } _%>

    if !access_controll {
        return master_types.ErrorResponse(-403, "Access Denied")
    }

    // get object
    objects, err := model.ModelGetAll[master_types.<%= H.table(DATA, OPT.the_name).type_name %>](
        model.NewMongoFilter(
        <%_ for( const field of H.fields(DATA, OPT.the_name, 'list')??[] ){_%>
            <%_ if (H.field_generate_type(DATA, OPT.the_name, field.name, 'list') == 'id'){_%>
            model.IdFilter(
            <%= H.ul(field.name) %> ,
            ),
            <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'update') == 'form'){_%>
                model.MongoKeyFilter(
                    "<%= H.ul(field.name) %>",
                    <%= H.ul(field.name) %>,
                ),
            <%_ } _%>
        <%_ } _%>
            model.MongoNoFlagFilter(master_types.BASIC_TYPE_FLAG_DELETED),
        ),
        &model.MongoOptions{
            Skip:  &index,
            Limit: &limit,
        },
    )
    if err != nil {
        return master_types.ErrorResponse(-500, err.Error())
    }

    // return response
    return master_types.SuccessResponse(objects)
}
/* @MT-TPL-LIST-END */

/* @MT-TPL-SEARCH-START */
func Search<%= OPT.TheName %>Service(
    user *master_types.User,
    <%_ for( const field of H.fields(DATA, OPT.the_name, 'search')??[] ){_%>
    <%_ if( H.field_generate_type(DATA, OPT.the_name, field.name, 'search') == 'form' ){_%>
    <%= H.ul(field.name) %> <%= field.value.type %>,
    <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'search') == 'id'){_%>
    <%= H.ul(field.name) %> master_types.PrimaryId,
    <%_ } _%>
    <%_ } _%>
    index, limit int64,
) (*master_types.MasterResponse) {
    // check if the user has permission of listing
    access_controll := false
    <%_ for( const permission of H.table_permissions(DATA, OPT.the_name, 'search')??[] ){_%>
    if !access_controll {
    <%_ if (permission.role == 'all') { _%>
        access_controll = true
    }
        <%_ break _%>
    <%_ } else if (permission.role == 'admin') { _%>
        if user.IsAdmin() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'model') { _%>
        if user.AllowManage<%= OPT.TheName %>() {
            access_controll = true
        }
    <%_ } else if (permission.role == 'belong') { _%>
        // get object
        object, err := get_object()
        if err == nil {
            if <%= H.bool_expression('PrimaryId', 'eq', 'object.' + H.bc(H.permission_field(DATA, OPT.the_name).field), 'user.Id') %> {
                access_controll = true
            }
        }
    <%_ } _%>
    }
    <%_ } _%>

    if !access_controll {
        return master_types.ErrorResponse(-403, "Access Denied")
    }

    // get object
    objects, err := model.ModelGetAll[master_types.<%= H.table(DATA, OPT.the_name).type_name %>](
        model.NewMongoFilter(
        <%_ for( const field of H.fields(DATA, OPT.the_name, 'search')??[] ){_%>
            <%_ if (H.field_generate_type(DATA, OPT.the_name, field.name, 'search') == 'id'){_%>
            model.IdFilter(
                <%= H.ul(field.name) %> ,
            ),
            <%_ } else if (H.field_generate_type(DATA, OPT.the_name, field.name, 'search') == 'form'){_%>
                model.MongoKeyFilter(
                    "<%= H.ul(field.name) %>",
                    <%= H.ul(field.name) %>,
                ),
            <%_ } _%>
        <%_ } _%>
            model.MongoNoFlagFilter(master_types.BASIC_TYPE_FLAG_DELETED),
        ),
        &model.MongoOptions{
            Skip:  &index,
            Limit: &limit,
        },
    )
    if err != nil {
        return master_types.ErrorResponse(-500, err.Error())
    }

    // return response
    return master_types.SuccessResponse(objects)
}
/* @MT-TPL-SEARCH-END */